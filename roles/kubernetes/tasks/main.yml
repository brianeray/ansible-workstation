---
- block:
  # TODO add id for change check?
  - name: Add apt key
    ansible.builtin.apt_key:
      url: "{{ k8s_repo_path }}/Release.key"
      #Recommended per k8s over default /etc/apt/trusted.gpg.d/*.gpg
      keyring: "{{ k8s_keyring }}"
      state: present

  - name: Add apt repository
    ansible.builtin.apt_repository:
      repo: "deb [signed-by={{ k8s_keyring }}] {{ k8s_repo_path }}/ /"
      filename: kubernetes
      state: present
  vars:
    k8s_keyring: /etc/apt/keyrings/kubernetes-apt-keyring.gpg
    k8s_repo_path: "{{ kubernetes_package_repo_base_url }}/core:/stable:/{{ k8s_minor_version}}/deb"

- name: Install it
  ansible.builtin.apt:
    name: kubectl
    state: present

- name: Create a kubeconfigs dir if necessary
  ansible.builtin.file:
    path: "{{ end_user_home }}/.kube/configs"
    state: directory
    owner: "{{ end_user }}"
    group: "{{ end_group }}"
    mode: 0775
  register: kubeconfigs_dir

- name: Find user kubeconfigs
  ansible.builtin.find:
    paths: "{{ kubeconfigs_dir.path }}"
    patterns:
      - '*.yml'
      - '*.yaml'
  register: kubeconfigs
  tags:
    - idempotency_check

- name: Clear KUBECONFIG variable in bash startup
  ansible.builtin.blockinfile:
    path: "{{ end_user_home }}/.bashrc"
    block: export KUBECONFIG=$KUBECONFIG
    marker: "# {mark} ANSIBLE MANAGED BLOCK - KUBECONFIG"
    state: present
  when: kubeconfigs.matched == 0

- name: Set KUBECONFIG variable in bash startup
  ansible.builtin.blockinfile:
    path: "{{ end_user_home }}/.bashrc"
    block: export KUBECONFIG=$KUBECONFIG:{{ kubeconfigs.files | map(attribute='path') | join(':') }}
    marker: "# {mark} ANSIBLE MANAGED BLOCK - KUBECONFIG"
    state: present
  when: kubeconfigs.matched > 0
